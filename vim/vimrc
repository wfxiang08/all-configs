set nocompatible 

if $TERM == "xterm" || $TERM == "xterm-color"
    set t_Co=256
endif

set runtimepath+=/usr/share/go/misc/vim

runtime modules/pathogen/autoload/pathogen.vim
call pathogen#infect('modules/{}')

" source custom functions first, elsewhere may need them
" this should not be silent, since we need the functions 
"silent! source $HOME/.vim/functions.vimrc
source $HOME/.vim/functions.vimrc

"""""""""" general settings """"""""""
syntax enable
filetype plugin indent off
set autoindent
autocmd BufEnter * :syntax sync fromstart
set fileformat=unix
set number
set showcmd
set ruler
set lazyredraw
set hidden
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set incsearch hlsearch
set ignorecase smartcase
set magic
" set showmatch
set nobackup
set nowb
set lbr
set autoindent smartindent cindent
set wildmenu
set wildmode=list:full
"set nofen
set fdl=3
set formatoptions+=mM
set ts=4 sts=4 sw=4 expandtab smarttab
set vb t_vb=
set background=dark
set noshowmode
set cinwords+=struct,class,def,elif,except,finally,try,catch

"set nowrap
"set wrap

filetype plugin indent on

inoremap # <space>#

inoremap <C-a> <Home>
inoremap <C-e> <End>
noremap <C-a> <Home>
noremap <C-e> <End>

noremap <silent><Home> :call SmartHome("n")<CR>
inoremap <silent><Home> <C-r>=SmartHome("i")<CR>
vnoremap <silent><Home> <Esc>:call SmartHome("v")<CR>

if !exists("*SmartHome")
    function SmartHome(mode)
        let ocol = col(".")
        if &wrap
            if ocol > 1
                call cursor(0, ocol - 1)
            endif
            normal g^
            let curcol = col(".")
            if ocol > 1 && ocol <= curcol
                call cursor(0, ocol - 1)
                normal g0
            endif
        else
            normal ^
            let curcol = col(".")
            if ocol > 1 && ocol <= curcol
                normal 0
            endif
        endif
        if a:mode == "v"
            normal msgv`s
        endif
        return ""
    endfunction
endif

noremap <silent><End> :call SmartEnd("n")<CR>
inoremap <silent><End> <C-r>=SmartEnd("i")<CR>
vnoremap <silent><End> <Esc>:call SmartEnd("v")<CR>

if !exists("*SmartEnd")
    function SmartEnd(mode)
        let ocol = col(".")
        let lastcol = a:mode == "i" ? col("$") : col("$") - 1
        if &wrap
            if ocol < lastcol
                call cursor(0, ocol + 1)
                normal g$
            endif
        else
            if ocol < lastcol
                normal $
            endif
        endif
        if ocol == lastcol
            normal g_
        endif
        if a:mode =="i"
            call cursor(0, col(".") + 1)
        elseif a:mode == "v"
            normal msgv`s
        endif
        return ""
    endfunction
endif

noremap  <buffer> <silent> <Up> gk
inoremap <buffer> <silent> <Up> <C-o>gk
noremap  <buffer> <silent> <Down> gj
inoremap <buffer> <silent> <Down> <C-o>gj

set history=65536  " vim default save 20 histories
set mouse=

" encoding stuffs
if (IsWindows())
    let &termencoding=&encoding 
    set fileencodings=utf8,cp936,ucs-bom,latin1
else
    set encoding=utf8
    set fileencodings=utf8,gb2312,gb18030,utf-16le,utf-16be,ucs-bom,latin1
endif

" status line
set laststatus=2
set statusline=%F%m%r%h%w\ %{&ff}\ %y\ [A=\%03.3b,\ H=\%02.2B]%=%-14.(%l,%c%V%)[%p%%]

" restore last position when opening a file
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

set list
set listchars=tab:▸\ ,eol:¬
"set listchars=tab:▸\ 
" to insert ¬, type: ctrl-v u00ac
" to insert ▸, type: ctrl-v u25b8
" set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

hi SpecialKey ctermfg=238
hi NonText ctermfg=238
hi cursorLine cterm=NONE ctermfg=1 ctermbg=252

set completeopt-=preview
set completeopt+=longest

"""""""""" plugin settings """"""""""
let s:PlugWinSize = 30

" NERD Tree
" http://www.vim.org/scripts/script.php?script_id=1658
" https://github.com/scrooloose/nerdtree
if IsPluginEnabled("nerdtree")
    let NERDTreeWinPos = "right"
    let NERDTreeWinSize = s:PlugWinSize 
    let NERDTreeShowHidden = 0
    let NERDTreeIgnore = ['\.pyc$', '\.swp$']
    if IsPluginEnabled("netrw")
        let NERDTreeHijackNetrw = 0
    endif
endif

" Buffers Explorer
" http://vim.sourceforge.net/scripts/script.php?script_id=42
if IsPluginEnabled("bufexplorer")
    let g:bufExplorerDefaultHelp=0       " Do not show default help.
    let g:bufExplorerShowRelativePath=1  " Show relative paths.
    let g:bufExplorerSortBy='mru'        " Sort by most recently used.
    let g:bufExplorerSplitRight=0        " Split left.
    let g:bufExplorerSplitVertical=1     " Split vertically.
    let g:bufExplorerSplitVertSize = s:PlugWinSize  " Split width
    let g:bufExplorerUseCurrentWindow=1  " Open in new window.
    autocmd BufWinEnter \[Buf\ List\] setl nonumber
endif

" python.vim
" http://www.vim.org/scripts/script.php?script_id=790
if IsPluginEnabled("python")
    let python_highlight_all = 1
endif

" taglist
" http://www.vim.org/scripts/script.php?script_id=273
if IsPluginEnabled("taglist")
    let Tlist_Show_One_File=1
    let Tlist_Exit_OnlyWindow=1
    let Tlist_Use_Right_Window=1
    let Tlist_GainFocus_On_ToggleOpen=1
    nnoremap <leader>tl : Tlist<CR>
endif

" grep.vim 
" http://www.vim.org/scripts/script.php?script_id=311

" Gundo
" http://www.vim.org/scripts/script.php?script_id=3304
" https://github.com/sjl/gundo.vim/

"""""""""" FileType settings """""""""" 
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd Filetype c set omnifunc=ccomplete#Complete
autocmd Filetype cpp set omnifunc=cppcomplete#Complete
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType go setlocal omnifunc=gocomplete#Complete ts=4 listchars=tab:\ \ ,eol:¬
let g:tex_flavor='latex'
autocmd FileType latex setlocal iskeyword+=:
" always set cursor at the beginning of GIT COMMIT file
autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
autocmd FileType html setlocal ts=8 sts=2 sw=2 expandtab
"""""""""" key mapping stuffs """""""""" 

let mapleader = ";"
nmap <space> :
vmap <space> :

nmap <leader>ww :w!<cr>

" navigate
"map gf :tabnew <cfile><cr>
nmap <m-n> :tabnext<cr>
nmap <m-h> :tabprevious<cr>
nmap <m-d> :tabclose<cr>
nmap <m-t> :tabnew<cr>
nmap <m-f> :Texplore<cr>

" quick fix
map <leader>cw :cw<cr>
map <F3> :cp<cr>
map <F4> :cn<cr>

" search
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" plugins
nmap <silent> T :NERDTreeToggle<cr>
nmap <silent> F :BufExplorer<CR>

" bprev bnext
nmap <C-S-n> :bn<CR>
nmap <C-S-p> :bp<CR>

" cscope bindings 
if has("cscope") 
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    " s: C语言符号  g: 定义     d: 这个函数调用的函数 c: 调用这个函数的函数
    " t: 文本       e: egrep模式    f: 文件     i: include本文件的文件
    nmap <leader>ss :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sc :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>st :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>se :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <leader>si :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <leader>sd :cs find d <C-R>=expand("<cword>")<CR><CR>
    set cscopequickfix=s-,c-,d-,i-,t-,e-
endif

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" vimwiki
nmap <leader>vv <Plug>VimwikiIndex
nmap <leader>vt <Plug>VimwikiToggleListItem
let g:vimwiki_list = [
            \ {'path': $HOME.'/vimwiki/ppweb/wiki/',
            \  'path_html': $HOME.'/vimwiki/ppweb/html/',
            \  'auto_export': 1,
            \  'template_path': $HOME.'/vimwiki/ppweb/template/',
            \  'template_default': 'default',
            \  'template_ext': '.html',
            \  'css_name': 'assets/style.css',
            \  'list_margin': 2
            \},
            \ {'path': $HOME.'/vimwiki/personal/wiki/',
            \  'path_html': $HOME.'/vimwiki/personal/html/',
            \  'auto_export': 1,
            \  'template_path': $HOME.'/vimwiki/personal/template/',
            \  'template_default': 'default',
            \  'template_ext': '.html',
            \  'css_name': 'assets/style.css',
            \  'list_margin': 2
            \}
            \ ]
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_CJK_length = 1
"let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,del,br,hr,div,code,h1'

" for golang
autocmd FileType go setlocal expandtab
"autocmd FileType go autocmd BufWritePre <buffer> Fmt
